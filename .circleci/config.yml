version: 2.1
orbs:
  aws-cli: circleci/aws-cli@2.0.3
commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}
jobs:
  create_infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file CloudFormation/template.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
              --region eu-west-2
  testing:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["1e:3d:96:35:ce:53:25:b9:b7:97:54:11:e6:44:1f:f0"]
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Run Playbook and Configure Server
          command: |
            ansible-playbook -i inventory.txt main.yml
  rollback_test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: simultate rollback
          command:  |
            return 1
      - destroy_environment
  smoke_test:
    docker:
      - image: alpine:latest4
    steps:
      - run: apk add --update curl
      - run:
          name: smoke test
          command: |
            URL="https://blog.udacity.com/"
            # Test if website exists
            if curl -s --head ${URL} 
            then
              return 0
            else
              return 1
            fi
  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create S3 Bucket
          command: |
              aws cloudformation deploy \
              --template-file CloudFormation/bucket.yml \
              --stack-name create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides BucketName="new-devops-ab-bucket-${CIRCLE_WORKFLOW_ID:0:7}"
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Get and Save old Pipeline ID
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - textfile.txt
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront yml
          command: |
            aws cloudformation deploy \
            --template-file CloudFormation/template.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="new-devops-ab-bucket-${CIRCLE_WORKFLOW_ID:0:7}"
  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous S3 bucket and Cloudformation stack
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive
workflows:
  myWorkflow:
    jobs:
      - create_and_deploy_front_end  
      - promote_to_production:
          requires:
            - create_and_deploy_front_end
      - get_last_deployment_id
      - clean_up_old_front_end:
          requires:
            - create_and_deploy_front_end
            - promote_to_production

